# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrant Cassandra Project
# https://github.com/bcantoni/vagrant-cassandra
# Brian Cantoni

# This template sets up 7 VMs:
#   node10: OpsCenter installed
#   node11-16: Java plus Apache Cassandra installed
# See the README for a walkthrough explaining Cassandra and DataStax installation.

# Adjustable settings
CFG_MEMSIZE = "1500"    # max memory for each VM
CFG_TZ = "US/Pacific"   # timezone, like US/Pacific, US/Eastern, UTC, Europe/Warsaw, etc.
SERVER_COUNT = 7
NETWORK = '10.211.55.'
FIRST_IP = 110

# if local Debian proxy configured (DEB_CACHE_HOST), install and configure the proxy client
deb_cache_cmds = ""
if ENV['DEB_CACHE_HOST']
  deb_cache_host = ENV['DEB_CACHE_HOST']
  deb_cache_cmds = <<CACHE
apt-get install squid-deb-proxy-client -y
echo 'Acquire::http::Proxy "#{deb_cache_host}";' | sudo tee /etc/apt/apt.conf.d/30autoproxy
cat /etc/apt/apt.conf.d/30autoproxy
CACHE
end

# Provisioning script for Opscenter node (node10)
opsc_script = <<SCRIPT
#!/bin/bash
cat > /etc/hosts <<EOF
127.0.0.1       localhost

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters

10.211.55.110   node10
10.211.55.111   node11
10.211.55.112   node12
10.211.55.113   node13
10.211.55.114   node14
10.211.55.115   node15
10.211.55.116   node16
EOF

# set timezone
echo "#{CFG_TZ}" > /etc/timezone    
dpkg-reconfigure -f noninteractive tzdata

#{deb_cache_cmds}

# add DataStax Community repo
echo "deb http://debian.datastax.com/community stable main" | sudo tee -a /etc/apt/sources.list.d/datastax.community.list
wget -q -O - http://debian.datastax.com/debian/repo_key | sudo apt-key add -
apt-get update

# install OpsCenter and a few base packages
apt-get install vim curl zip unzip git python-pip opscenter -y

# start OpsCenter
service opscenterd start

echo "Vagrant provisioning complete and OpsCenter started"
SCRIPT

# Provisioning script for Cassandra nodes (node11-16)
node_script = <<SCRIPT
#!/bin/bash
cat > /etc/hosts <<EOF
127.0.0.1       localhost

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters

10.211.55.110   node10
10.211.55.111   node11
10.211.55.112   node12
10.211.55.113   node13
10.211.55.114   node14
10.211.55.115   node15
10.211.55.116   node16
EOF

# set timezone
echo "#{CFG_TZ}" > /etc/timezone    
dpkg-reconfigure -f noninteractive tzdata

#{deb_cache_cmds}

# configure Apache Cassandra repo
echo "deb http://www.apache.org/dist/cassandra/debian 21x main" | sudo tee -a /etc/apt/sources.list.d/cassandra.sources.list
wget -q -O - https://www.apache.org/dist/cassandra/KEYS | sudo apt-key add -
apt-get update

# install Java first, then Apache Cassandra
apt-get install openjdk-7-jdk libjna-java -y
apt-get install vim curl zip unzip git python-pip python-support cassandra -y

# stop Cassandra (which automatically starts after install) and clear data files
echo "Stopping Cassandra..."
sleep 10
service cassandra stop
sleep 10
rm -rf /var/lib/cassandra/*

# copy datacenter config files and restart Cassandra
IP=`/sbin/ifconfig eth1 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`
sed -i -e "s/^\s*cluster_name:.*$/cluster_name: 'MultiDC Vagrant'/" /etc/cassandra/cassandra.yaml
sed -i -e "s/ seeds:.*$/ seeds: 'node11,node12'/" /etc/cassandra/cassandra.yaml
sed -i -e "s/^listen_address:.*$/listen_address: $IP/" /etc/cassandra/cassandra.yaml
sed -i -e "s/^.*broadcast_address:.*$/broadcast_address: /" /etc/cassandra/cassandra.yaml
sed -i -e "s/^rpc_address:.*$/rpc_address: 0.0.0.0/" /etc/cassandra/cassandra.yaml
sed -i -e "s/^.*broadcast_rpc_address:.*$/broadcast_rpc_address: $IP/" /etc/cassandra/cassandra.yaml
sed -i -e "s/^endpoint_snitch:.*$/endpoint_snitch: PropertyFileSnitch/" /etc/cassandra/cassandra.yaml

cp /vagrant/cassandra-topology.properties /etc/cassandra
echo "Restarting Cassandra..."
service cassandra start

# download and configure datastax-agent to connect to OpsCenter node
echo "Setting up OpsCenter agent..."
wget -q https://downloads.datastax.com/community/datastax-agent-5.2.5.tar.gz
tar xvzf datastax-agent-*
cd datastax-agent-*
echo "stomp_interface: 10.211.55.110" >> ./conf/address.yaml
bin/datastax-agent

echo "Vagrant provisioning complete"
SCRIPT


# Configure VM servers
servers = []
(0..SERVER_COUNT-1).each do |i|
  name = 'node1' + i.to_s
  ip = NETWORK + (FIRST_IP + i).to_s
  servers << {'name' => name, 'ip' => ip}
end

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "ubuntu/trusty64"
  servers.each do |server|
    config.vm.define server['name'] do |config2|
      config2.vm.hostname = server['name']
      config2.vm.network :private_network, ip: server['ip']

      if (server['name'] == 'node10')
        config2.vm.provision :shell, :inline => opsc_script
      else
        config2.vm.provision :shell, :inline => node_script
      end

      config2.vm.provider "vmware_fusion" do |v|
        v.vmx["memsize"]  = CFG_MEMSIZE
      end
      config2.vm.provider :virtualbox do |v|
        v.name = server['name']
        v.customize ["modifyvm", :id, "--memory", CFG_MEMSIZE]
      end

    end
  end
end
